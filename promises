Promise:
--It is a special type of object that represent the eventual completion(or failure) of an asynchronous operation.
It allows to handle asynchronous tasks more efficiently than callbacks
Three states:
1)pending: The initial state , the promise is still waiting for the operation to finish
2)fulfilled: The operation completed successfully
3)Rejected: The operation failed

Exp:
1)To create a promise-new promise()
Two parameters:
Resolve  to mark the promise as successfully
Reject:mark it as failed
2)handling the result: then() method is called when promise is fulfilled
It will receives the result from resolve()
.catch() method is called if the promise is rejected it receives the error message from reject()
Ex:
let mypromise =new Promise((resolve ,reject)=>{
        let success=true;
        if(success){
            resolve("The Operation is successfull");
        }else{
            reject("the operation failed")
        }
    });
    mypromise
   .then(result=>{
        console.log(result)
    })
    .catch(error=>{
        console.log(error)
    })
Output:
The Operation is successfully
let mypromise1 =new Promise((resolve ,reject)=>{
        let success=false;
        if(success){
            resolve("The Operation is successfull");
        }else{
            reject("the operation failed")
        }
    });
    mypromise1
    .then(result=>{
        document.write(result)
    })
    .catch(error=>{
        document.write(error)
    })
Output:
The Operation failed
Chaining promises:
Ex:
let promise=new Promise((resolve ,reject)=>{
            resolve(5)
            //initial resolve value is 5
        })
        promise
        .then(result =>{
            console.log(result)
            return result *2
            //return a new value
        })
        .then(result =>{
            console.log(result)
            return result +3
            //return a new value
        })
        .then(result=>{
            console.log(result)

        })
        .catch(error=>{
            console.log("error" ,error)
        })
Output:
5
10
13
Ex:
promise with 1 setTimeOut
Asynchronous task using setTimeOut , and the promise will resolve after a certain amount of time
