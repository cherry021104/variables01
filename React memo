12-02-2025
React memo:
•	it is an HOC(high order component) is not a React hook 
•	it will stop unnecessary rendering of functional components
•	it will improve the performance of the functional components
with out memo : App.js
import {useState}from 'react';

import ChildA from"./ChildA"
import ChildB from "./ChildB"

const Parent =()=>{
  const[count ,setCount] =useState(0);
  const increment =() =>{
    setCount(c=>c+1);
  };
  return(
    <div>
      <ChildA/>
      <ChildB count={count} increment={increment}/> 
    </div>
  )
};
export default Parent;


ChildA.js
const ChildA=()=>{
    console.log("child A rendered")
    return <h2> This is ChildA</h2>
}
export default ChildA;


ChildB.js
const ChildB=({count ,increment})=>{
    console.log("ChildB rendered")
    return(
        <div>
            <h1>count:{count}</h1>
            <button onClick={increment}>increment</button>
        </div>
    )
}
export default ChildB;

output:
This is ChildA
count:0
increment

when ever we click on the button (increment) in child B both child A and Child B will gets rendered because they there parent common




With memo 
app.js
import {useState}from 'react';

import ChildA from"./ChildA"
import ChildB from "./ChildB"

const Parent =()=>{
  const[count ,setCount] =useState(0);
  const increment =() =>{
    setCount(c=>c+1);
  };
  return(
    <div>
      <ChildA/>
      <ChildB count={count} increment={increment}/> 
    </div>
  )
};
export default Parent;

ChildA.js
import {memo} from'react';
const ChildA=()=>{
    console.log("child A rendered")
    return <h2> This is ChildA</h2>
}
export default memo(ChildA);



ChildB.js

const ChildB=({count ,increment})=>{
    console.log("ChildB rendered")
    return(
        <div>
            <h1>count:{count}</h1>
            <button onClick={increment}>increment</button>
        </div>
    )
}
export default ChildB;

output:
This is ChildA
count:4
increment
